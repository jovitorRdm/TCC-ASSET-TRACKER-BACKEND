generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  hour
  day
  event
  peopleQuantity
}

enum MeasurementUnit {
  UNIT
  PACKAGE
  KILOGRAM
  LITER
  METER
  CENTIMETER
}

enum AccountType {
  EventAdministrator
  Receptionist
}

enum Status {
  active
  inactive
}

model EventType {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(120)
  description String?  @db.VarChar(500)
  status      Status   @default(active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("event_types")
}

model Assignment {
  id                 String        @id @default(uuid())
  name               String        @unique @db.VarChar(120)
  description        String?       @db.VarChar(500)
  paymentMethod      PaymentMethod
  paymentValue       Float
  status             Status        @default(active)
  accountRequirement Boolean       @default(false)
  accountType        AccountType?
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  Employee           Employee[]
  services           Service[]
  Product            Product?      @relation(fields: [productId], references: [id])
  productId          String?

  @@map("assignment")
}

model Account {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account")
}

model Address {
  id           String   @id @default(uuid())
  cep          String   @db.VarChar(8)
  city         String   @db.VarChar(120)
  state        String   @db.VarChar(2)
  neighborhood String   @db.VarChar(120)
  street       String   @db.VarChar(120)
  number       String   @db.VarChar(10)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Person       Person?

  @@map("addresses")
}

// PESSOA
model Person {
  id          String   @id @default(uuid())
  status      Status   @default(active)
  name        String   @db.VarChar(120)
  document    String   @unique @db.VarChar(14) // if(11 == cpf ou 14 == cnpj)
  birthdate   DateTime
  phoneNumber String   @map("phone_number") @db.VarChar(11)
  email       String   @unique @db.VarChar(256)
  password    String?
  address     Address  @relation(fields: [addressid], references: [id])
  addressid   String   @unique @map("address_id")

  Customer  Customer?
  Employee  Employee?
  Supplier  Supplier?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("person")
}

// CLIENTE
model Customer {
  id        String   @id @default(uuid())
  personid  String   @unique
  person    Person   @relation(fields: [personid], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("costumer")
}

// COLABORADOR
model Employee {
  id           String     @id @default(uuid())
  personid     String     @unique
  person       Person     @relation(fields: [personid], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("employees")
}

model Supplier {
  id        String   @id @default(uuid())
  personid  String   @unique
  person    Person   @relation(fields: [personid], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("supplier")
}

model Service {
  id          String       @id @default(uuid())
  name        String       @unique @db.VarChar(120)
  description String?      @db.VarChar(500)
  status      Status       @default(active)
  assignments Assignment[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("service")
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique @db.VarChar(120)
  description String? @db.VarChar(500)
  quantity    Int
  value       Float

  status      Status       @default(active)
  assignments Assignment[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  @@map("product")
}
