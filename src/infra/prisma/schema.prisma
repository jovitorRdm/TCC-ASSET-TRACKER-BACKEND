generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  hour
  day
  event
  peopleQuantity
}

enum MeasurementUnit {
  unit
  package
  kilogram
  liter
  meter
}

enum ProductType {
  Consumable
  Rental
}

enum AccountType {
  EventAdministrator
  Receptionist
}

enum Status {
  active
  inactive
}

enum TypeBudget {
  event
  rent
}

model EventType {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(120)
  description String?  @db.VarChar(500)
  status      Status   @default(active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  Budget      Budget[]

  @@map("event_types")
}

model Assignment {
  id                 String        @id @default(uuid())
  name               String        @unique @db.VarChar(120)
  description        String?       @db.VarChar(500)
  paymentMethod      PaymentMethod
  paymentValue       Float
  status             Status        @default(active)
  accountRequirement Boolean       @default(false)

  accountType  AccountType?
  peopleServed Float        @default(0)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  Employee     Employee[]
  services     Service[]

  @@map("assignment")
}

model Account {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("account")
}

model Address {
  id           String        @id @default(uuid())
  cep          String        @db.VarChar(8)
  city         String        @db.VarChar(120)
  state        String        @db.VarChar(2)
  neighborhood String        @db.VarChar(120)
  street       String        @db.VarChar(120)
  number       String        @db.VarChar(10)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  Person       Person?
  EventSalons  EventSalons[]

  @@map("addresses")
}

// PESSOA
model Person {
  id          String   @id @default(uuid())
  status      Status   @default(active)
  name        String   @db.VarChar(120)
  document    String   @unique @db.VarChar(14) // if(11 == cpf ou 14 == cnpj)
  birthdate   DateTime
  phoneNumber String   @map("phone_number") @db.VarChar(11)
  email       String   @unique @db.VarChar(256)
  password    String?
  address     Address  @relation(fields: [addressid], references: [id])
  addressid   String   @unique @map("address_id")

  Customer  Customer?
  Employee  Employee?
  Supplier  Supplier?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("person")
}

// CLIENTE
model Customer {
  id        String   @id @default(uuid())
  status    Status   @default(active)
  personid  String   @unique
  person    Person   @relation(fields: [personid], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Budget Budget[]

  @@map("costumer")
}

// COLABORADOR
model Employee {
  id           String     @id @default(uuid())
  status       Status     @default(active)
  personid     String     @unique
  person       Person     @relation(fields: [personid], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@map("employees")
}

model Supplier {
  id            String          @id @default(uuid())
  status        Status          @default(active)
  personid      String          @unique
  person        Person          @relation(fields: [personid], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  FiscalProduct FiscalProduct[]

  @@map("supplier")
}

model Service {
  id             String           @id @default(uuid())
  name           String           @unique @db.VarChar(120)
  description    String?          @db.VarChar(500)
  status         Status           @default(active)
  assignmentId   String
  saleValue      Float            @default(0)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  Assignment     Assignment       @relation(fields: [assignmentId], references: [id])
  BudgetServices BudgetServices[]

  @@map("service")
}

model Product {
  id                   String          @id @default(uuid())
  name                 String          @unique @db.VarChar(120)
  description          String?         @db.VarChar(500)
  consumptionPerPerson Float
  measurementUnit      MeasurementUnit @default(unit)
  quantity             Float
  value                Float
  productType          ProductType     @default(Consumable)
  numberDay            Float?
  SaleValue            Float?
  percentage           Float?

  status    Status   @default(active)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ProductEntry   ProductEntry[]
  BudgetProducts BudgetProducts[]

  @@map("product")
}

model FiscalProduct {
  id             String         @id @default(uuid())
  status         Status         @default(active)
  supplier       Supplier       @relation(fields: [supplierId], references: [id])
  invoiceNumber  String
  issueDate      DateTime
  supplierId     String
  productEntries ProductEntry[]

  totalAmount Float @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("fiscal_Product")
}

model ProductEntry {
  id              String      @id @default(uuid())
  quantity        Float
  value           Float
  productId       String
  fiscalProductId String?
  productType     ProductType @default(Consumable)
  numberDay       Float?
  SaleValue       Float?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  Product       Product        @relation(fields: [productId], references: [id])
  FiscalProduct FiscalProduct? @relation(fields: [fiscalProductId], references: [id])
}

model Budget {
  id            String           @id @default(uuid())
  status        Status           @default(active)
  typeBudget    TypeBudget       @default(rent)
  customerId    String
  numberPeople  Float
  pickupDate    DateTime
  returnDate    DateTime
  totalAmount   Float            @default(0)
  totalCharged  Float            @default(0)
  discount      Float            @default(0)
  eventTypeId   String?
  budgetService BudgetServices[]
  budgetProduct BudgetProducts[]

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Customer  Customer?  @relation(fields: [customerId], references: [id])
  eventType EventType? @relation(fields: [eventTypeId], references: [id])

  @@map("budget")
}

model BudgetServices {
  serviceId String
  unitPrice Float
  quantity  Float

  id        String   @id @default(uuid())
  budgetId  String
  Budget    Budget   @relation(fields: [budgetId], references: [id])
  Service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("budget_services")
}

model BudgetProducts {
  productId String
  unitPrice Float
  quantity  Float

  id        String   @id @default(uuid())
  budgetId  String
  Budget    Budget   @relation(fields: [budgetId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("budget_products")
}

model EventSalons {
  id          String  @id @default(uuid())
  status      Status  @default(active)
  name        String
  description String
  address     Address @relation(fields: [addressId], references: [id])
  addressId   String
  value       Float
  capacity    Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
